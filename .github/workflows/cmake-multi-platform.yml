name: CMake on Ubuntu and Windows

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "*" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]

    steps:
    - name: Install Qt - Linux
      if: runner.os == 'Linux'
      uses: jurplel/install-qt-action@v4
      with:
        version: '6.4.2'
        target: 'desktop'
        set-env: 'true'

    - name: Install Qt - Windows
      if: runner.os == 'Windows'
      uses: jurplel/install-qt-action@v4
      with:
        version: '6.8.2'
        target: 'desktop'
        set-env: 'true'

    - uses: actions/checkout@v4

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake Ubuntu
      if: runner.os == 'Linux'
      run: |
        echo "Running Linux build"
          cmake -B ${{ steps.strings.outputs.build-output-dir }} \
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
            -S ${{ github.workspace }} \
            -G "Unix Makefiles" # Use Unix Makefiles for Ubuntu
      shell: bash  # This makes sure we use Bash on both platforms.

    - name: Configure CMake Windows
      if: runner.os == 'Windows'
      run: |
        echo "Running Windows build"
        echo "Build output directory: ${{ steps.strings.outputs.build-output-dir }}" 
        cmake -B ${{ steps.strings.outputs.build-output-dir }} -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -S ${{ github.workspace }} -G "Visual Studio 17 2022"
      shell: pwsh

    - name: Build
      if: runner.os == 'Linux'
      run: |
        echo "Building on Linux"
        cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}
      shell: bash

    - name: Package DEB file for Ubuntu 24.04
      if: runner.os == 'Linux'
      uses: jtdor/build-deb-action@v1
      env:
        DEB_BUILD_OPTIONS: noautodbgsym
      with:
        artifacts-dir: build
        docker-image: ubuntu:24.04
        extra-build-deps: devscripts git
        before-build-hook: |
          git checkout debian/changelog
          debchange --controlmaint --local="ubuntu-24.04-noble~git$(git rev-parse --short HEAD)" "CI build"
        buildpackage-opts: --build=binary --no-sign

    - name: Package DEB file for Debian
      if: runner.os == 'Linux'
      uses: jtdor/build-deb-action@v1
      env:
        DEB_BUILD_OPTIONS: noautodbgsym
      with:
        artifacts-dir: build
        docker-image: debian:trixie
        extra-build-deps: devscripts git
        before-build-hook: |
          git checkout debian/changelog
          debchange --controlmaint --local="debian-trixie~git$(git rev-parse --short HEAD)" "CI build"
        buildpackage-opts: --build=binary --no-sign

    - name: Upload DEB files
      if: runner.os == 'Linux' && (github.ref == 'refs/heads/master')
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      shell: bash
      run: |
        mv ${{ steps.strings.outputs.build-output-dir }}/*ubuntu-24.04*.deb ${{ steps.strings.outputs.build-output-dir }}/tail-tray-ubuntu-24.04.deb
        mv ${{ steps.strings.outputs.build-output-dir }}/*debian*.deb ${{ steps.strings.outputs.build-output-dir }}/tail-tray-debian-trixie.deb
        gh release upload latest ${{ steps.strings.outputs.build-output-dir }}/*.deb --clobber

    - name: Build on Windows
      if: runner.os == 'Windows'
      run: |
        echo "Building with Visual Studio"
        cmake --build ${{ steps.strings.outputs.build-output-dir }} --config Release
      shell: pwsh

    - name: Package Windows Build
      if: runner.os == 'Windows' && (github.ref == 'refs/heads/master')
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      shell: pwsh
      run: |
        # Define paths
        $BUILD_DIR = "${{ steps.strings.outputs.build-output-dir }}"
        $INSTALLER_DIR = "$BUILD_DIR/installer"
        $EXECUTABLE_PATH = "$BUILD_DIR/${{matrix.build_type}}/tail-tray.exe"

        # Create installer directory if it doesn't exist
        mkdir -p $INSTALLER_DIR

        # Copy the executable to the installer directory
        if (Test-Path $EXECUTABLE_PATH) {
            Copy-Item -Path $EXECUTABLE_PATH -Destination $INSTALLER_DIR
        } else {
            Write-Host "ERROR: tail-tray.exe not found in $EXECUTABLE_PATH!"
            exit 1
        }

        # Run windeployqt to copy necessary Qt DLLs
        windeployqt --release --dir $INSTALLER_DIR $INSTALLER_DIR/tail-tray.exe

        # Verify that tail-tray.exe exists in the installer folder
        if (!(Test-Path "$INSTALLER_DIR/tail-tray.exe")) {
            Write-Host "ERROR: tail-tray.exe is missing from the installer folder!"
            exit 1
        }

        # Use 7z to create a proper ZIP file including all subdirectories
        choco install -y 7zip

        7z a -r "$BUILD_DIR/Tail-Tray-Windows.zip" "$INSTALLER_DIR/*"

        # Verify that the zip file was created
        if (!(Test-Path "$BUILD_DIR/Tail-Tray-Windows.zip")) {
            Write-Host "ERROR: Tail-Tray-Windows.zip was not created!"
            exit 1
        }
        
        # And attach the file
        gh release upload latest "$BUILD_DIR/Tail-Tray-Windows.zip" --clobber

    - name: Get Latest Commit Messages
      if: runner.os == 'Linux' && (github.ref == 'refs/heads/master')
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "ðŸš€ Configuring Git user for pushing tags"
        git config --global user.email "github-actions@github.com"
        git config --global user.name "GitHub Actions"

        echo "ðŸš€ Generating changelog..."
        echo "This is the latest known good build from master, use at your own discression!" > changelog.txt
        echo "### Latest Changes" >> changelog.txt

        git fetch --tags --force

        # Generate the changelog from the previous tag to HEAD
        git log latest..HEAD --pretty=format:"* %h - %s" >> changelog.txt
        echo "" >> changelog.txt
        echo "âœ… Changelog generated:"
        cat changelog.txt

        # Force-update `latest` as an annotated tag
        git tag -fa latest -m "GitHub Actions - Latest"
        git push origin latest --force

        # Update the GitHub release
        echo "Updating latest release"
        gh release edit latest --notes-file changelog.txt --repo ${{ github.repository }}

    - name: Upload Windows Build Artifact
      if: runner.os == 'Windows' && (github.ref == 'refs/heads/master')
      uses: actions/upload-artifact@v4
      with:
        name: Tail-Tray-Windows
        path: "${{ steps.strings.outputs.build-output-dir }}/installer"

    - name: Upload Linux Build Artifact
      if: runner.os == 'Linux'
      uses: actions/upload-artifact@v4
      with:
        name: Tail-Tray-Linux
        path: ${{ steps.strings.outputs.build-output-dir }}/*.deb
