name: CMake on Ubuntu and Windows

on:
  push:
    branches: [ "master", "prod" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]

    steps:
    - name: Install Qt
      uses: jurplel/install-qt-action@v4
      with:
        version: '6.4.2'
        target: 'desktop'
        set-env: 'true'

    - uses: actions/checkout@v4

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}
        -G "Visual Studio 16 2019" # Required for Windows with Visual Studio (for multi-config build)

    - name: Build
      run: |
        if [[ $RUNNER_OS == "Windows" ]]; then
          cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}
        else
          cmake --build ${{ steps.strings.outputs.build-output-dir }}
        fi

    - name: Package Windows Build
      if: runner.os == 'Windows'
      run: |
        mkdir -p ${{ steps.strings.outputs.build-output-dir }}/installer
        windeployqt ${{ steps.strings.outputs.build-output-dir }}/my_app.exe --dir ${{ steps.strings.outputs.build-output-dir }}/installer
        zip -r Tail-Tray.zip ${{ steps.strings.outputs.build-output-dir }}/installer
      shell: bash

    - name: Package DEB file
      if: runner.os == 'Linux' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/prod')
      run: |
         chmod +x ./build-deb.sh
         ./build-deb.sh ${{ steps.strings.outputs.build-output-dir }}
      shell: bash

    - uses: "marvinpinto/action-automatic-releases@latest"
      with:
        repo_token: "${{ secrets.GITHUB_TOKEN }}"
        automatic_release_tag: "latest"
        prerelease: true
        title: "Dev build artifacts"
        files: |
          ${{ steps.strings.outputs.build-output-dir }}/*.deb
          ${{ steps.strings.outputs.build-output-dir }}/my_app_windows.zip
      if: (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/prod')
